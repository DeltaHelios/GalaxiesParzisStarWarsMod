package com.parzivail.pswgtk.ui;

import com.google.gson.Gson;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.parzivail.pswg.Resources;
import com.parzivail.pswgtk.model.nemi.NemiModel;
import com.parzivail.pswgtk.screen.JComponentScreen;
import com.parzivail.pswgtk.util.DialogUtil;
import com.parzivail.pswgtk.util.FileUtil;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.nbt.NbtIo;
import net.minecraft.text.Text;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Path;

public class NemiCompilerScreen extends JComponentScreen
{

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		rootPanel = new JPanel();
		rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
		openFiles = new JTabbedPane();
		rootPanel.add(openFiles, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(200, 200), null, 0, false));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
		openFiles.addTab("Untitled", panel1);
		menuBar = new JMenuBar();
		rootPanel.add(menuBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return rootPanel;
	}

	private static final Gson gson = new Gson();
	private static final String I18N_TOOLKIT_NEMI_COMPILER = Resources.screen("nemi_compiler");

	private JPanel rootPanel;
	private JTabbedPane openFiles;
	private JMenuBar menuBar;

	private NemiModel model;

	protected NemiCompilerScreen(Screen parent)
	{
		super(parent, Text.translatable(I18N_TOOLKIT_NEMI_COMPILER));

		var menu = new JMenu("File");
		menu.add(new JMenuItem("Open NEMi..."));
		menuBar.add(menu);
	}

	@Override
	protected JComponent getRootComponent()
	{
		return rootPanel;
	}

	private void click(MouseEvent mouseEvent)
	{
		DialogUtil.openFile("Open Model", false, "*.nemi")
		          .ifPresent(paths -> openModel(paths[0]));
		DialogUtil.saveFile("Save Model", "*.nem")
		          .ifPresent(this::saveModel);
	}

	private void saveModel(String path)
	{
		path = FileUtil.ensureExtension(path, ".nem");

		var nem = model.createNem();

		try
		{
			var file = new File(path);
			file.delete();
			NbtIo.write(nem, file);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}

	public void setModel(NemiModel model)
	{
		this.model = model;
	}

	private void openModel(String path)
	{
		try (Reader reader = Files.newBufferedReader(Path.of(path)))
		{
			setModel(gson.fromJson(reader, NemiModel.class));
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
}
